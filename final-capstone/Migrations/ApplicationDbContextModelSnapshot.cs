// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using final_capstone.Data;

namespace finalcapstone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("final_capstone.Models.Neighborhood", b =>
                {
                    b.Property<int>("NeighborhoodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("NeighborhoodId");

                    b.ToTable("Neighborhood");

                    b.HasData(
                        new { NeighborhoodId = 1, Name = "Ravenswood" },
                        new { NeighborhoodId = 2, Name = "Lincoln Park" },
                        new { NeighborhoodId = 3, Name = "Andersonville" },
                        new { NeighborhoodId = 4, Name = "Wrigleyville" },
                        new { NeighborhoodId = 5, Name = "River North" },
                        new { NeighborhoodId = 6, Name = "Logan Square" },
                        new { NeighborhoodId = 7, Name = "Roscoe Village" },
                        new { NeighborhoodId = 8, Name = "Southport Corridor" },
                        new { NeighborhoodId = 9, Name = "North Center" },
                        new { NeighborhoodId = 10, Name = "Wicker Park" },
                        new { NeighborhoodId = 11, Name = "Old Town" },
                        new { NeighborhoodId = 12, Name = "West Loop" },
                        new { NeighborhoodId = 13, Name = "Lincoln Square" },
                        new { NeighborhoodId = 14, Name = "Other" }
                    );
                });

            modelBuilder.Entity("final_capstone.Models.Recommendation", b =>
                {
                    b.Property<int>("RecommendationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId");

                    b.Property<string>("ApplicationUserId1");

                    b.Property<bool>("DefaultView");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NeighborhoodId");

                    b.Property<int>("RecommendationTypeId");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("WebsiteURL");

                    b.HasKey("RecommendationId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("RecommendationTypeId");

                    b.ToTable("Recommendation");

                    b.HasData(
                        new { RecommendationId = 1, ApplicationUserId = 1, DefaultView = false, Description = "Breakfast", Name = "Over Easy", NeighborhoodId = 1, RecommendationTypeId = 1, StreetAddress = "4943 N. Damen Ave.", WebsiteURL = "overeasycafechicago.com" },
                        new { RecommendationId = 2, ApplicationUserId = 1, DefaultView = false, Description = "Contemporary-American", Name = "Hub 51", NeighborhoodId = 5, RecommendationTypeId = 1, StreetAddress = "51 W. Hubbard St.", WebsiteURL = "hub51chicago.com" },
                        new { RecommendationId = 3, ApplicationUserId = 1, DefaultView = false, Description = "Comedy Club", Name = "The Second City", NeighborhoodId = 11, RecommendationTypeId = 2, StreetAddress = "1616 N. Wells St.", WebsiteURL = "secondcity.com" },
                        new { RecommendationId = 4, ApplicationUserId = 1, DefaultView = false, Description = "American Comfort", Name = "Crosby's Kitchen", NeighborhoodId = 8, RecommendationTypeId = 1, StreetAddress = "3455 N. Southport Ave.", WebsiteURL = "crosbyschicago.com" },
                        new { RecommendationId = 5, ApplicationUserId = 1, DefaultView = false, Description = "Bar", Name = "HopLeaf", NeighborhoodId = 3, RecommendationTypeId = 1, StreetAddress = "5148 N. Clark St.", WebsiteURL = "hopleafbar.com" }
                    );
                });

            modelBuilder.Entity("final_capstone.Models.RecommendationType", b =>
                {
                    b.Property<int>("RecommendationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("RecommendationTypeId");

                    b.ToTable("RecommendationType");

                    b.HasData(
                        new { RecommendationTypeId = 1, Name = "Food & Drink" },
                        new { RecommendationTypeId = 2, Name = "Entertainment" },
                        new { RecommendationTypeId = 3, Name = "Other" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("final_capstone.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");


                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new { Id = "d8e565d1-6b07-4c9b-bbd7-698dad017496", AccessFailedCount = 0, ConcurrencyStamp = "537eeca8-2c5c-4d8d-867c-93aaae8a934c", Email = "admin@admin.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "ADMIN@ADMIN.COM", NormalizedUserName = "ADMIN@ADMIN.COM", PasswordHash = "AQAAAAEAACcQAAAAEKbrrMyZqmm9EZ3i4mMYUlEjFP04Bz7SpyePvNmnq0baFoEy7nc21rb6WmgOCx8dpg==", PhoneNumberConfirmed = false, SecurityStamp = "67fdf855-264a-4eed-8afa-1003e0145e9c", TwoFactorEnabled = false, UserName = "admin@admin.com" },
                        new { Id = "fb0bb898-aae2-4126-9565-32827d1ac8df", AccessFailedCount = 0, ConcurrencyStamp = "eca30e2c-fd47-43c6-91ac-e22c5a16ea5b", Email = "test@test.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "TEST@TEST.COM", NormalizedUserName = "TEST@TEST.COM", PasswordHash = "AQAAAAEAACcQAAAAEMgFApaF0/W6b2uXCRkopikW9LfgzJgnB3vDUtBOj+dizwSNLl/hpVf4NjBdmEptRA==", PhoneNumberConfirmed = false, SecurityStamp = "8b65fb3a-7140-48bd-b17f-d09d11cd19ef", TwoFactorEnabled = false, UserName = "test@test.com" }
                    );
                });

            modelBuilder.Entity("final_capstone.Models.Recommendation", b =>
                {
                    b.HasOne("final_capstone.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Recommendations")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("final_capstone.Models.Neighborhood", "Neighborhood")
                        .WithMany()
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("final_capstone.Models.RecommendationType", "RecommendationType")
                        .WithMany()
                        .HasForeignKey("RecommendationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
